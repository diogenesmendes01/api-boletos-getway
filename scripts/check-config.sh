#!/bin/bash

echo "üîç Verificando configura√ß√£o do ambiente..."
echo "=========================================="

# Verificar arquivos de ambiente
echo "üìÅ Arquivos de ambiente:"
if [ -f .env ]; then
    echo "‚úÖ .env encontrado"
    echo "   API_BASE_URL: $(grep API_BASE_URL .env | cut -d'=' -f2 || echo 'n√£o definido')"
    echo "   NODE_ENV: $(grep NODE_ENV .env | cut -d'=' -f2 || echo 'n√£o definido')"
else
    echo "‚ùå .env n√£o encontrado"
fi

if [ -f .env.production ]; then
    echo "‚úÖ .env.production encontrado"
    echo "   API_BASE_URL: $(grep API_BASE_URL .env.production | cut -d'=' -f2 || echo 'n√£o definido')"
else
    echo "‚ùå .env.production n√£o encontrado"
fi

echo ""

# Verificar docker-compose
echo "üê≥ Configura√ß√£o Docker:"
if [ -f docker-compose.yml ]; then
    echo "‚úÖ docker-compose.yml encontrado"
    echo "   API_BASE_URL: $(grep API_BASE_URL docker-compose.yml | cut -d'=' -f2 || echo 'n√£o definido')"
else
    echo "‚ùå docker-compose.yml n√£o encontrado"
fi

if [ -f docker-compose.prod.yml ]; then
    echo "‚úÖ docker-compose.prod.yml encontrado"
    echo "   API_BASE_URL: $(grep API_BASE_URL docker-compose.prod.yml | cut -d'=' -f2 || echo 'n√£o definido')"
else
    echo "‚ùå docker-compose.prod.yml n√£o encontrado"
fi

echo ""

# Verificar se a aplica√ß√£o est√° rodando
echo "üöÄ Status da aplica√ß√£o:"
if curl -s http://localhost:3000/health > /dev/null 2>&1; then
    echo "‚úÖ API rodando em http://localhost:3000"
    echo "üìñ Swagger dispon√≠vel em: http://localhost:3000/docs"
else
    echo "‚ùå API n√£o est√° rodando em http://localhost:3000"
fi

echo ""
echo "üîß Para resolver problemas de CORS:"
echo "   1. Verifique se API_BASE_URL est√° configurado corretamente"
echo "   2. Reinicie a aplica√ß√£o ap√≥s altera√ß√µes"
echo "   3. Use npm run dev para desenvolvimento local"
