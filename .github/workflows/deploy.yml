name: Deploy API Boletos Gateway

on:
  push:
    branches: 
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: diogenesmendes01/api-boletos-getway
  VPS_IP: 168.231.92.229

jobs:
  test:
    name: Testes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci || npm install

      - name: Executar testes
        run: npm test || echo "Testes n√£o configurados"
        continue-on-error: true

      - name: Build do projeto
        run: npm run build || echo "Build realizado no Docker"

  build-and-push:
    name: Build e Push Docker
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Metadata da imagem
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy:
    name: Deploy na VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            set -e
            echo "================================================"
            echo "üöÄ INICIANDO DEPLOY - API BOLETOS GATEWAY"
            echo "================================================"
            echo ""
            
            # Configura√ß√µes
            PROJECT_DIR="~/projetos/api-boleto"
            IMAGE_NAME="ghcr.io/${{ env.IMAGE_NAME }}:latest"
            
            # Criar diret√≥rios necess√°rios
            echo "üìÅ Preparando diret√≥rios..."
            mkdir -p ${PROJECT_DIR}/{logs,uploads,backups}
            cd ${PROJECT_DIR}
            
            # Criar arquivo .env se n√£o existir
            if [ ! -f .env ]; then
              echo "üìù Criando arquivo .env..."
              cat > .env << 'ENVEOF'
            # Seguran√ßa - ALTERE ESTAS SENHAS!
            JWT_SECRET=jwt_super_secret_olympia_2024_change_this_now
            API_KEY=api_key_super_secret_olympia_2024_change_this_now
            
            # Outras configura√ß√µes
            LOG_LEVEL=info
            ENVEOF
              echo "‚ö†Ô∏è  Arquivo .env criado. Por favor, edite as senhas!"
            fi
            
            # Fazer backup do docker-compose atual
            if [ -f docker-compose.prod.yml ]; then
              cp docker-compose.prod.yml docker-compose.prod.yml.backup
              echo "üíæ Backup do docker-compose.prod.yml criado"
            fi
            
            # Login no GitHub Container Registry (se token configurado)
            if [ ! -z "${{ secrets.GHCR_TOKEN }}" ]; then
              echo "üîê Fazendo login no GHCR..."
              echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            fi
            
            # Baixar imagem mais recente
            echo "üì¶ Baixando imagem Docker..."
            if docker pull ${IMAGE_NAME}; then
              echo "‚úÖ Imagem baixada com sucesso"
            else
              echo "‚ùå Erro ao baixar imagem do GHCR"
              echo "Tentando build local como fallback..."
              
              # Clonar c√≥digo se necess√°rio
              if [ ! -d "source" ]; then
                git clone https://github.com/${{ github.repository }}.git source
              fi
              cd source && git pull origin main
              
              # Build local
              docker build -t api-boleto-local .
              IMAGE_NAME="api-boleto-local"
              cd ${PROJECT_DIR}
            fi
            
            # Criar docker-compose.prod.yml com configura√ß√£o completa
            echo "üìù Criando docker-compose.prod.yml..."
            cat > docker-compose.prod.yml << 'DOCKEREOF'
           version: '3.8'

services:
  api-boleto:
    image: ghcr.io/diogenesmendes01/api-boletos-getway:latest
    container_name: api-boleto-olympia
    restart: always
    command: node dist/src/main.js
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      NODE_ENV: production
      PORT: "3000"
      
      # ===== BANCO DE DADOS =====
      DB_HOST: postgres-olympia
      DB_PORT: "5432"
      DB_USERNAME: olympia_app
      DB_PASSWORD: V/aMMGypweFPSlGivTdcaC44zzEZDfuv
      DB_DATABASE: boleto_db
      
      # ===== TYPEORM =====
      TYPEORM_CONNECTION: postgres
      TYPEORM_HOST: postgres-olympia
      TYPEORM_PORT: "5432"
      TYPEORM_USERNAME: olympia_app
      TYPEORM_PASSWORD: V/aMMGypweFPSlGivTdcaC44zzEZDfuv
      TYPEORM_DATABASE: boleto_db
      TYPEORM_SYNCHRONIZE: "false"
      TYPEORM_LOGGING: "true"
      TYPEORM_ENTITIES: dist/src/entities/*.entity.js
      TYPEORM_MIGRATIONS: dist/src/migrations/*.js
      TYPEORM_MIGRATIONS_DIR: src/migrations
      TYPEORM_ENTITIES_DIR: src/entities
      TYPEORM_MIGRATIONS_TABLE_NAME: migrations
      TYPEORM_MIGRATIONS_RUN: "true"
      
      # ===== REDIS (IMPORTANTE!) =====
      REDIS_URL: redis://redis-boleto:6379
      
      # ===== SEGURAN√áA =====
      JWT_SECRET: jwt_olympia_secret_change_this_2024
      API_KEY: api_key_olympia_change_this_2024
      
      # ===== OUTROS =====
      CORS_ORIGINS: https://envio-boleto.olympiabank.xyz
      LOG_LEVEL: debug
      
    networks:
      - proxy-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - redis-boleto
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ADICIONAR REDIS
  redis-boleto:
    image: redis:7-alpine
    container_name: redis-boleto
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - proxy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  redis_data:

networks:
  proxy-network:
    external: true
            DOCKEREOF
            
            # Substituir vari√°vel IMAGE_NAME no docker-compose
            sed -i "s|\${IMAGE_NAME}|${IMAGE_NAME}|g" docker-compose.prod.yml
            
            # Garantir que postgres-olympia est√° na rede correta
            echo "üîó Verificando conex√£o de rede..."
            docker network connect proxy-network postgres-olympia 2>/dev/null || echo "postgres-olympia j√° conectado √† proxy-network"
            
            # Parar container antigo
            echo "üõë Parando container antigo..."
            docker compose -f docker-compose.prod.yml down || true
            docker rm -f api-boleto-olympia || true   # <<< √öNICA LINHA ADICIONADA
            
            # Limpar volumes √≥rf√£os
            docker volume prune -f 2>/dev/null || true
            
            # Subir novo container
            echo "üöÄ Iniciando novo container..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate
            
            # Aguardar inicializa√ß√£o
            echo "‚è≥ Aguardando inicializa√ß√£o (30 segundos)..."
            sleep 30
            
            # Verificar status
            echo "üîç Verificando status do deploy..."
            if docker ps | grep -q api-boleto-olympia; then
              echo ""
              echo "================================================"
              echo "‚úÖ CONTAINER RODANDO COM SUCESSO!"
              echo "================================================"
              
              # Informa√ß√µes do container
              echo "üìä Status do container:"
              docker ps | grep api-boleto-olympia
              
              # Testar health check
              echo ""
              echo "üè• Testando health check..."
              if curl -f -s http://localhost:3001/health > /dev/null 2>&1; then
                echo "‚úÖ Health check respondendo!"
                curl -s http://localhost:3001/health | head -20
              else
                echo "‚ö†Ô∏è Health check n√£o est√° respondendo ainda"
                echo "Aguarde mais alguns segundos ou verifique os logs"
              fi
              
              # Mostrar √∫ltimos logs
              echo ""
              echo "üìã √öltimos logs do container:"
              echo "================================================"
              docker logs --tail 50 api-boleto-olympia
              echo "================================================"
              
              # Verificar se migrations rodaram
              echo ""
              echo "üóÑÔ∏è Verificando migrations..."
              docker exec postgres-olympia psql -U olympia_app -d boleto_db -c "\dt" 2>/dev/null | head -20 || echo "N√£o foi poss√≠vel verificar tabelas"
              
              # Informa√ß√µes finais
              echo ""
              echo "================================================"
              echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
              echo "================================================"
              echo "üìç URL Local: http://localhost:3001"
              echo "üåê URL P√∫blica: https://api.envio-boleto.olympiabank.xyz"
              echo "üìÅ Localiza√ß√£o: ${PROJECT_DIR}"
              echo "üê≥ Container: api-boleto-olympia"
              echo "üìù Logs: docker logs -f api-boleto-olympia"
              echo "================================================"
              
            else
              echo ""
              echo "================================================"
              echo "‚ùå ERRO: CONTAINER N√ÉO EST√Å RODANDO!"
              echo "================================================"
              echo "üìã Logs de erro:"
              docker logs api-boleto-olympia --tail 100
              echo ""
              echo "üîß Tentando diagnosticar o problema..."
              docker ps -a | grep api-boleto
              echo ""
              echo "üí° Sugest√µes:"
              echo "1. Verifique os logs: docker logs api-boleto-olympia"
              echo "2. Verifique a conex√£o com o banco: docker exec api-boleto-olympia ping postgres-olympia"
              echo "3. Verifique as vari√°veis de ambiente: docker exec api-boleto-olympia env"
              exit 1
            fi
            
            # Limpar imagens antigas
            echo ""
            echo "üßπ Limpando imagens antigas..."
            docker image prune -f
            
            echo ""
            echo "‚úÖ Script de deploy finalizado!"