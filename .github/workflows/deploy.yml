# .github/workflows/deploy.yml
name: Deploy API Boletos Gateway

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: diogenesmendes01/api-boletos-getway   # Deve bater com o 'image:' do seu compose
  VPS_IP: 168.231.92.229
  PROJECT_DIR: ~/projetos/api-boleto
  COMPOSE_REMOTE_PATH: ~/projetos/api-boleto/docker-compose.prod.yml

jobs:
  test:
    name: Testes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci || npm install

      - name: Executar testes
        run: npm test || echo "Testes não configurados"
        continue-on-error: true

      - name: Build do projeto local (opcional)
        run: npm run build || echo "Build será feito na imagem Docker"

  build-and-push:
    name: Build e Push Docker
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Metadata da imagem
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}

      - name: Build e Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy:
    name: Deploy na VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout código (para enviar o compose correto)
        uses: actions/checkout@v4

      - name: Enviar arquivos de deploy para a VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml,scripts/deploy-prod.sh,scripts/debug-prod.sh"
          target: "${{ env.PROJECT_DIR }/"
          overwrite: true
          strip_components: 0

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail

            echo "================================================"
            echo "🚀 INICIANDO DEPLOY - API BOLETOS GATEWAY"
            echo "================================================"

            PROJECT_DIR="${PROJECT_DIR:-${HOME}/projetos/api-boleto}"
            COMPOSE_FILE="${COMPOSE_REMOTE_PATH:-${PROJECT_DIR}/docker-compose.prod.yml}"

            echo "📁 Garantindo diretórios..."
            mkdir -p "${PROJECT_DIR}"
            cd "${PROJECT_DIR}"

            echo "🔎 Verificando compose recebido..."
            test -f "${COMPOSE_FILE}" || { echo "❌ Compose não encontrado em ${COMPOSE_FILE}"; exit 1; }

            echo "🔐 Login no GHCR (se houver token dedicado)..."
            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR:-ci}" --password-stdin
            fi

            echo "🔗 Garantindo rede externa 'proxy-network'..."
            # Remove rede se existir para evitar conflitos
            docker network rm proxy-network 2>/dev/null || true
            docker network create proxy-network || true

            echo "🛑 Parando stack anterior (se houver)..."
            docker compose -f "${COMPOSE_FILE}" down --remove-orphans || true

            echo "🧹 LIMPEZA COMPLETA - Removendo containers conflitantes..."
            # Remove containers por nome para evitar conflitos
            docker rm -f api-boleto-olympia 2>/dev/null || true
            docker rm -f redis-boleto 2>/dev/null || true
            
            # Remove containers órfãos que possam estar usando os nomes
            docker container prune -f || true
            
            # Remove imagens antigas para liberar espaço
            docker image prune -f || true
            
            # Remove volumes órfãos que possam estar causando conflitos
            docker volume prune -f || true

            echo "📦 Pull das imagens definidas no seu compose..."
            docker compose -f "${COMPOSE_FILE}" pull || true

            echo "🚀 Executando script de deploy otimizado..."
            chmod +x "${PROJECT_DIR}/deploy-prod.sh"
            "${PROJECT_DIR}/deploy-prod.sh"
