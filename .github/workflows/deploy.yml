# .github/workflows/deploy.yml
name: Deploy API Boletos Gateway

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/api-boletos-getway
  VPS_IP: 168.231.92.229
  PROJECT_DIR: /opt/api-boletos-getway

jobs:
  test:
    name: Tests and Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para versionamento sem√¢ntico

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Executar Linter
        run: npm run lint

      - name: Executar testes
        run: |
          if npm test; then
            echo "‚úÖ Testes passaram com sucesso"
          else
            echo "::error::Testes falharam - verifique os erros acima"
            exit 1
          fi

      - name: Build do projeto
        run: |
          npm run build
          echo "‚úÖ Build conclu√≠do com sucesso"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          # Se for uma tag sem√¢ntica, usa ela
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "üè∑Ô∏è Tag sem√¢ntica detectada: ${VERSION}"
          # Se for main/master, usa latest
          elif [[ "${{ github.ref }}" == refs/heads/main ]] || [[ "${{ github.ref }}" == refs/heads/master ]]; then
            VERSION="latest"
            echo "üåø Branch principal: ${VERSION}"
          # Para outras branches, usa o nome da branch + short SHA
          else
            BRANCH=${GITHUB_REF#refs/heads/}
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            VERSION="${BRANCH}-${SHORT_SHA}"
            echo "üåø Branch de desenvolvimento: ${VERSION}"
          fi
          
          # Valida√ß√£o de vers√£o sem√¢ntica
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚úÖ Vers√£o sem√¢ntica v√°lida: ${VERSION}"
            SEMVER_MAJOR=$(echo $VERSION | cut -d. -f1 | sed 's/v//')
            SEMVER_MINOR=$(echo $VERSION | cut -d. -f2)
            SEMVER_PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Gerar tags adicionais para compatibilidade
            echo "major=${SEMVER_MAJOR}" >> $GITHUB_OUTPUT
            echo "minor=${SEMVER_MAJOR}.${SEMVER_MINOR}" >> $GITHUB_OUTPUT
            echo "patch=${SEMVER_PATCH}" >> $GITHUB_OUTPUT
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Version: ${VERSION}"

  build-and-push:
    name: Build and Push Docker Image
    needs: [test, version]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}"
          if docker manifest inspect ${IMAGE} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚è© Imagem j√° existe: ${IMAGE}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "üÜï Nova imagem ser√° criada: ${IMAGE}"
          fi

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v6
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ needs.version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

  deploy:
    name: Deploy to Production
    needs: [build-and-push, version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://api.envio-boleto.olympiabank.xyz

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Preparar arquivos de deploy
        run: |
          # Criar diret√≥rio tempor√°rio para deploy
          mkdir -p deploy-package
          
          # Copiar arquivos necess√°rios
          cp docker-compose.prod.yml deploy-package/
          cp -r scripts/ deploy-package/scripts/
          
          # Criar arquivo de vers√£o
          echo "${{ needs.version.outputs.version }}" > deploy-package/VERSION
          echo "${{ github.sha }}" > deploy-package/COMMIT
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > deploy-package/DEPLOY_TIME

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Enviar arquivos de deploy
        uses: appleboy/scp-action@v0.1.8
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy-package/*"
          target: "${{ env.PROJECT_DIR }}"
          overwrite: true
          strip_components: 1

      - name: Backup atual antes do deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            
            BACKUP_DIR="${{ env.PROJECT_DIR }}/backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "${BACKUP_DIR}"
            
            # Salvar vers√£o atual
            if docker ps --format "{{.Names}}" | grep -q "api-boleto-olympia"; then
              docker inspect api-boleto-olympia --format='{{.Config.Image}}' > "${BACKUP_DIR}/previous_version.txt" || true
              docker logs --tail 1000 api-boleto-olympia > "${BACKUP_DIR}/last_logs.txt" 2>&1 || true
            fi
            
            echo "‚úÖ Backup criado em ${BACKUP_DIR}"

      - name: Deploy Application
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          command_timeout: 10m
          script: |
            set -euo pipefail
            
            echo "================================================"
            echo "üöÄ INICIANDO DEPLOY AUTOMATIZADO"
            echo "üì¶ Vers√£o: ${{ needs.version.outputs.version }}"
            echo "üîß Commit: ${{ github.sha }}"
            echo "================================================"
            
            cd ${{ env.PROJECT_DIR }}
            
            # Garantir permiss√µes dos scripts
            chmod +x scripts/*.sh
            
            # Executar deploy com a nova vers√£o
            export DEPLOY_VERSION="${{ needs.version.outputs.version }}"
            export DEPLOY_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${DEPLOY_VERSION}"
            
            # Login no registry (se necess√°rio)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Executar script de deploy otimizado
            ./scripts/deploy-prod.sh

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            
            echo "üè• Executando health checks..."
            
            cd ${{ env.PROJECT_DIR }}
            
            # Usar script de health check inteligente
            if [ -f "scripts/health-check.sh" ]; then
              chmod +x scripts/health-check.sh
              ./scripts/health-check.sh quick
            else
              echo "‚ö†Ô∏è Script de health check n√£o encontrado, usando m√©todo padr√£o"
              
              # Fallback para m√©todo anterior
              MAX_ATTEMPTS=24
              ATTEMPT=0
              
              while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                if curl -f -s "http://localhost:3001/v1/health" > /dev/null; then
                  echo "‚úÖ Aplica√ß√£o est√° saud√°vel!"
                  curl -s "http://localhost:3001/v1/health" | jq '.' || true
                  exit 0
                fi
                
                ATTEMPT=$((ATTEMPT + 1))
                echo "‚è≥ Tentativa $ATTEMPT/$MAX_ATTEMPTS - Aguardando aplica√ß√£o..."
                sleep 5
              done
              
              echo "‚ùå Aplica√ß√£o n√£o respondeu ap√≥s 2 minutos"
              exit 1
            fi

      - name: Rollback on Failure
        if: failure() && steps.deploy.outcome == 'failure'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "üîÑ INICIANDO ROLLBACK..."
            cd ${{ env.PROJECT_DIR }}
            
            # Executar script de rollback
            if [ -f scripts/rollback.sh ]; then
              ./scripts/rollback.sh
            else
              echo "‚ö†Ô∏è Script de rollback n√£o encontrado"
              # Tentar reverter para √∫ltima vers√£o conhecida
              docker compose -f docker-compose.prod.yml down
              docker compose -f docker-compose.prod.yml up -d
            fi

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deploy realizado com sucesso!"
            echo "üì¶ Vers√£o: ${{ needs.version.outputs.version }}"
            echo "üåê URL: https://api.envio-boleto.olympiabank.xyz"
          else
            echo "‚ùå Deploy falhou - verifique os logs"
          fi

  cleanup:
    name: Cleanup Old Resources
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Cleanup old images on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "üßπ Limpando recursos antigos..."
            
            # Manter apenas as √∫ltimas 3 imagens
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "{{.Tag}}\t{{.ID}}" | \
              tail -n +4 | awk '{print $2}' | xargs -r docker rmi -f || true
            
            # Limpar containers parados
            docker container prune -f
            
            # Limpar imagens n√£o utilizadas (mas preservar volumes)
            docker image prune -f
            
            # Limpar logs antigos (mais de 7 dias)
            find ${{ env.PROJECT_DIR }}/logs -type f -mtime +7 -delete 2>/dev/null || true
            
            # Limpar backups antigos (mais de 30 dias)
            find ${{ env.PROJECT_DIR }}/backups -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
            
            echo "‚úÖ Limpeza conclu√≠da"